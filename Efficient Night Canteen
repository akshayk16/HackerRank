-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Problem
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
In order to cater to the needs of a large number of students in BITS, the mess organisers have decided to introduce the concept of a CONVEYER BELT in the Night Canteen. 
This would make the order placing system more efficient. The conveyer belt has two ends - one where the chef places the dishes and the other where the person at the 
counter receives the dishes for further distribution. There is also a SIDE LANE in between the two ends(which makes the belt T-shaped). The chef does not care about 
order numbers. He places the dishes in a random order. But the order has to be delivered on the basis of order numbers in an increasing manner(i.e 1,2,3,..,n-1,n). 
The role of the side lane is to bring the dishes to the desired order. There are certain rules that need to be followed regarding the side lane. 
The dish that enters the side lane last must leave the side lane first. Also a dish cannot re-enter the side lane once it has left.
You are given the order of dishes in which they arrive. Your task is to find if the dishes can be brought into the desired order.

Input Format
The first line of the input contains a number T , denoting the number of testcases. The next T lines contain the description of each testcase. For each testcase 
: The first line contains a number N, denoting the number of orders. The next line contains N numbers from 1 to N in the order in which the chef places the dishes.

Constraints
1 <= T <= 10
1 <= N <= 1000

Output Format
For each testcase: Print YES (case sensitive) if the dishes can brought into the desired order. Otherwise print NO (case sensitive).

Sample Input 0
1
5
5 1 2 4 3
Sample Output 0
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Code:C++
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// C++ implementation of the approach 
#include <bits/stdc++.h> 
using namespace std; 
  
// Function that returns true if it is 
// possible to make the permutation 
// increasing by swapping any two numbers 
bool check(int A[], int N) 
{ 
    // Stack S 
    stack<int> S; 
  
    // Pointer to the end value of array B. 
    int B_end = 0; 
  
    // Traversing each element of A[] from starting 
    // Checking if there is a valid operation  
    // that can be performed. 
    for (int i = 0; i < N; i++)  
    { 
        // If the stack is not empty 
        if (!S.empty())  
        { 
            // Top of the Stack. 
            int top = S.top(); 
  
            // If the top of the stack is 
            // Equal to B_end+1, we will pop it 
            // And increment B_end by 1. 
            while (top == B_end + 1)  
            { 
                // if current top is equal to 
                // B_end+1, we will increment  
                // B_end to B_end+1 
                B_end = B_end + 1; 
  
                // Pop the top element. 
                S.pop(); 
  
                // If the stack is empty We cannot 
                // further perfom this operation. 
                // Therefore break 
                if (S.empty())  
                { 
                    break; 
                } 
  
                // Current Top 
                top = S.top(); 
            } 
  
            // If stack is empty 
            // Push the Current element 
            if (S.empty()) { 
                S.push(A[i]); 
            } 
            else 
            { 
                top = S.top(); 
  
                // If the Current element of the array A[] 
                // if smaller than the top of the stack 
                // We can push it in the Stack. 
                if (A[i] < top)  
                { 
                    S.push(A[i]); 
                } 
                // Else We cannot sort the array 
                // Using any valid operations. 
                else 
                { 
                    // Not Stack Sortable 
                    return false; 
                } 
            } 
        } 
        else 
        { 
            // If the stack is empty push the current 
            // element in the stack. 
            S.push(A[i]); 
        } 
    } 
  
    // Stack Sortable 
    return true; 
} 
  
// Driver code 
int main() 
{ 
    int t;cin>>t;
    while(t--){
    int n1;cin>>n1;
    int a[n1];
        for(int i=0;i<n1;i++)
        {
            int x;cin>>x;
            a[i]=x;
        }
        //reverse(a,a+n1);
    check(a, n1)? cout<<"YES\n": cout<<"NO\n";    
    }
  
    return 0; 
} 
